# -*- coding: utf-8 -*-
"""Bibliotecas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/183XnGOcaK_iXuvpPNPPIuz887RlIXuLz

#### Pandas
"""

'''
Importar arquivo

'''
import pandas as pd
df = pd.read_csv('nome_do_arquivo.csv')
#alguns documentos csv estão separados por algum caractere, como | , ;. Precisamos informar isso ao pandas
df = pd.read_csv('nome_do_arquivo.csv', sep = '|')
#colocar o diretorio
df = pd.read_csv(r'C:\caminho todo do arquivo\nome_do_arquivo.csv', sep = '|')
'''
Caso na importação de problema na leitura da tabela, testar encoding
encoding='latin1'
encoding='ISO-8859-1'
encoding='utf-8'
encoding='cp1252'
'''

#Trazer infos, como qnt de dados, NA, type da coluna etc
df.info() 

#Criar novo df com colunas do df original
novo_df = df['coluna1', 'coluna2', 'coluna3']
#ou
lista_colunas = ['coluna1', 'coluna2', 'coluna3']
novo_df = df[lista_colunas]

#Para aparecer varias tabelas seguidas, e nao fazer blocos de code para cada
display(df1)
display(df2)
display(df3)

'''
Excluir dados da tabela que não é necessário
axis=1 é coluna
axis=0 é linha
'''
df = df.drop(['coluna1', 'coluna2', 'coluna3'], axis=1)
#ou
df = df.drop(columns=['coluna1', 'coluna2', 'coluna3'])

##pode fazer esse codigo e associar a novo df

'''
Juntar planilhas
'''
df_nova = df_nova.merge(df1, on='Coluna que conecta as duas')
df_nova = df_nova.merge(df2, on='Coluna que conecta as duas')

display(df_nova)

'''
Alterar nome coluna
'''
df = df.rename(columns={'Coluna antiga': 'novo nome'})

'''
contar qnt de algo
podemos mostrar a msm coisa em gráfico
'''
qnt = df['coluna'].value_counts()
qnt.plot()
#podemos modificar o plot.
qnt[:5].plot()    #só os 5 primeiros resultados
#alterar tamanho. Obs, o tamanho é ir testando o melhor
qnt[:5].plot(figsize=(15,5))
#alterar eixos (yticks, xticks)
qnt[:5].plot(figsize=(15,5), yticks=range(0,100,20))   #vai de 0 a 100, de 20 em 20

'''
Podemos criar novo df agrupando por item, para poder analisar esse item
ex: p somar a qnt de algo
groupby
'''
df_grupo = df.groupby('coluna').sum()
df_grupo = df.groupby('coluna').mean()
df_grupo = df.groupby('coluna').values.count()

'''
isso vai fazer um no df apresentando os valores de outras colunas agrupado pela coluna de interesse
podemos filtrar apenas pelas colunas que quermos ver
'''
#colocar duplo colchete pra virar tabela e não series
df_grupo = df_grupo[['coluna que queremos', 'coluna que quermos2']] #não precisa colocar a coluna q foi usada p agrupar pq ela vira indice

'''
Ordenar 
'''
#Ordena por valores de uma coluna
df = df.sort_values('coluna') 
df = df.sort_values('coluna', asceding=False) #decrescente

#Criar gráfico
df[:5].plot()
df[:5].plot(figsize(15,5))
df[:5].plot(figsize(15,5), kind=bar)    #kind vc especifica que tipo de gráficos, tem vários no datasheet
df[:5].plot()

'''
Filtrando
'''
df_filtro = df[df['coluna'] == x]

'''
Modificando e adicionando colunas ao df
'''
#modificar data
df['coluna data'] = pd.to_datetime(df['coluna data'], format='%d/%m/%Y')

#add coluna
## Se temos uma coluna c um nome, ele modifica ela, mas se nao temos uma coluna c um nome, ele cria uma nova
df['coluna criada'] = df['coluna que queremos extrair algo p coluna criada'].dt.year    #dt é de datetime, e estamos criando coluna nova só c o ano. Dependendo do type coloca algo diferente

'''
loc     #permite acessar uma linha, coluna ou item especifico, pelo indice
iloc    #o msm que o loc, mas pega pela posicao do item
'''
#modificar valor especifico
df.loc[[0,2,5]]   #vai pegar as linhas de indice 0, 2, 5
#colocar uma coluna como indice   ex:ID
df = df.set_index('coluna q quermos como indice')
#agr o loc permite acessar de acordo com o nome do prod
df.loc[['nome da linha da coluna de indice']]
#pegar o valor de uma linha de uma coluna especifica, colocar a coluna apos a linha
df.loc[['nome da linha da coluna de indice'], ['coluna']]

'''
Exportar csv
'''
#Exporta o csv para a pasta que voce extraiu o arquivo
df.to_csv('nome do arquivo.csv', sep = ';') #separador pode ser o que vc preferir
#Exportar para novo local
df.to_csv(r'C:\diretorio que vc quer\nome do arquivo.csv', sep = ';')

'''
EXCEL
pandas
ou
apenpyxl    #ele trata como VBA do excel, não é tão bom qnt pandas, mas preserva tipo gráfico do excel
'''
#importar como excel
tabela = pd.read_excel('nome arquivo.xlsx')
tabela = pd.read_excel(r'C:\diretorio\nome arquivo.xlsx')

#exportar
tabela.to_xlsx('nome arquivo.csv')

"""#### Matplotlib
https://matplotlib.org/2.0.2/gallery.html
```
import matplotlib.pyplot as plt
```

Fig de figure (tudo que é apresentado) e ax de eixos
```
fig, ax = plt.subplots()
ax.plot(df1['coluna1'], df1['coluna2'])
```
Caso queira plotar + graficos junto c o anterior é só continuar c o code
```
ax.plot(df2['coluna1', df2['coluna2']])
```
Visualizar
```
plt.show()
```

##### Costumizar

1. Colocar os pontos no gráfico
###### https://matplotlib.org/stable/api/markers_api.html
```
ax.plot(df1['coluna1'], df1['coluna2'], marker = 'o')
      'o' usa circulos   'v' usa triangulos
```
    
2. Alterar as linhas
```
ax.plot(df1['coluna1'], df1['coluna2'], linestyle = '--')
       'None'    ':'    '-.'    '--'    '-'
``` 
3. Alterar a cor
```
ax.plot(df1['coluna1'], df1['coluna2'], color ='r')   #r de red
```
4. Alterar nome dos eixos
```
ax.set_xlabel('Nome do eixo x')
ax.set_ylabel('Nome do eixo y')
ax.set_title('Nome do titulo')
```

##### Adicionar mais dados

As vezes add muitos dados prejudica o gráfico, então temos subplot
1. Cria uma grade de gráficos (ex: 3 linhas x 2 colunas)
```
fig, ax = plt.subplots(3,2)
      Para adicionar os dados, precisamos chamar os dados por posição
ax[0, 0].plot(df['coluna1'],
              df['coluna2'],
              color='b'])
```

2. Caso tenha apenas 1 linha ou 1 coluna
```
fig, ax = plt.subplots(3,2)
ax[0].plot(df['coluna1'],
              df['coluna2'],
              color='b'])
ax[1].plot(df['coluna1'],
              df['coluna2'],
              color='b'])
ax[0].set_ylabel('Eixo')
ax[1].set_ylabel('Eixo')
ax[1].set_xlabel('Eixo')
        Como são 2 linhas x 1 coluna, precisamos de 2 titulos eixo y e 1 eixo x
```
3. Colocar todos os gráficos no mesmo range
```
fig, ax = plt.subplots(3,2, sharey=True)
```

Quando queremos comparar 2 dados com range mt diferente, podemos colocar um range no eixo a esquerda e outro dado com range no eixo a direita

```
fig, ax = plt.subplots()
ax.plot(df.index, df['coluna'], color='red')
ax.set_xlabel('eixo')
ax.set_ylabel('eixo', color = 'red')
ax.tick_params('y', color='red')

ax2 = ax.twinx()
ax2.plot(df.index, df['coluna2'], color = 'blue')
ax2.set_ylabel('eixo', color='blue')
ax.tick_params('y', colors='blue')

plt.show()
```

1. Criando Function para optimizar os gráficos
```
def plot_timeseries(axes, x,y, color, xlabel, ylabel):
  axes.plot(x, y, color=color)
  axes.set_xlabel(xlabel)
  axes.set_ylabel(ylabel, color=color)
  axes.tick_params('y', colors=color)

  plot_timeseries(ax, df.index, df['coluna1', 'red', 'EixoX', 'EixoY1'])
  ax2 = ax.twinx()
  plot_timeseries(ax, df.index, df['coluna2', 'blue', 'EixoX', 'EixoY2'])
```

##### Gráfico de Barra

```
fig, ax = plt.subplots()
ax.bar(df.index, df['coluna'])
```

1. Arrumar os labels
```
ax.set_xticklabels(df.index, rotation = 90)
```

2. Add outros dados no gráfico
```
ax.bar(df.index, df['coluna1'])
ax.bar(df.index, df['coluna2'], bottom=df['coluna1'])
ax.bar(df.index, df['coluna2'], bottom=df['coluna1'] + df['coluna3'])
ax.set_xticklabels(df.index, rotation = 90)
ax.set_ylabel('Eixo y')
```

3. Adicionar legenda
```
ax.bar(df.index, df['coluna1'], label = 'nome')
ax.bar(df.index, df['coluna2'], bottom=df['coluna1'], label = 'nome2')
ax.bar(df.index, df['coluna3'], bottom=df['coluna1'] + df['coluna2'], label = 'nome3')
ax.set_xticklabels(df.index, rotation = 90)
ax.set_ylabel('Eixo y')
ax.legend()
```

##### Histogramas

```
ax.hist(df['coluna1'], label = 'Coluna')
ax.hist(df['coluna2'], label = 'Coluna2')
ax.set_xlabel('Eixo X')
ax.set_ylabel('Eixo y')
ax.legend()
plt.show()
```
1. Dividir o gráfico em x colunas com bins
```
ax.hist(df['coluna1'], label = 'Coluna', bins=5)
ax.hist(df['coluna2'], label = 'Coluna2', bins=5)
ax.set_xlabel('Eixo X')
ax.set_ylabel('Eixo y')
ax.legend()
plt.show()
```
2. Colocar um range ao inves de n° de bins
```
ax.hist(df['coluna1'], label = 'Coluna1', bins=[5, 10, 15, 20])
ax.hist(df['coluna2'], label = 'Coluna2', bins=[5, 10, 15, 20])
ax.set_xlabel('Eixo X')
ax.set_ylabel('Eixo y')
ax.legend()
plt.show()
```
3. Podemos alterar o tipo da barra com histtype
```
ax.hist(df['coluna1'], label = 'Coluna1', bins=[5, 10, 15, 20], histtype = 'step')
ax.hist(df['coluna2'], label = 'Coluna2', bins=[5, 10, 15, 20], histtype = 'step')
```

##### Barra de Erro

```
fig, ax = plt.subplots()

ax.bar('Nova_coluna',
       df['coluna1'].mean()
       yerr=df['coluna1'].std())

ax.bar('Nova_coluna2',
       df['coluna2'].mean()
       yerr=df['coluna2'].std())

ax.set_ylabel('Eixo y')
plt.show()
```

##### Boxplot

```
ax.boxplot([df['coluna1'], df['coluna2']])

ax.set_xticklabels(['nome', 'nome2'])
ax.set_ylabel('Eixo y')

plt.show()
```
Média = linha que aparece no meio
A caixa é a distancia interquartilica (entre 25 e 75)
Risco é o IC de 95
Outlier = Pontos que aparecem fora

##### Scatterplot

```
fig, ax = plt.subplots()
ax.scatter([df['coluna1'], df['coluna2']])
```
1. Colocar 2 dados
```
x = df['data1':'data2']
y = df['data1':'data2']
ax.scatter(vr1['Coluna1'], vr1['colouna2'], color='red', label='x')
ax.scatter(vr2['Coluna1'], vr2['colouna2'], color='blue', label='y')
ax.legend()
ax.set_xlabel('Eixo x')
ax.set_ylabel('Eixo y')
plt.show()
```
2. Cada indice uma cor
```
ax.scatter(df['Coluna1'], df['colouna2'], c=df.index)
ax.set_xlabel('Eixo x')
ax.set_ylabel('Eixo y')
plt.show()
```

##### Manipulando desing do gráfico

https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html
1. Usar ggplot altera todo o desing do gráfico
```
plt.style.use('ggplot')
fig, ax = plt..subplots()
ax.plot(df['coluna1'], df['coluna2'])
ax.plot(df2['coluna1'], df2['coluna2'])
ax.set_xlabel('Eixo x')
ax.set_ylabel('Eixo y')
plt.show()
```
2. Voltar ao padrão
```
plt.style.use('default')
```

3. Alguns modelos
```
plt.style.use('ggplot')
plt.style.use('bmh')
plt.style.use('seaborn-colorblind')
```
4. Tamanho
```
fig.set_size_inches([5,3])
```

##### Salvar figuras

```
fig.savefig('nome da figura.png')
fig.savefig('nome da figura.jpg')
fig.savefig('nome da figura.jpg', quality = 50)     #entr 1 e 100, mas qlq numero acima de 95 é ineficaz
fig.savefig('nome da figura.svg')                   #pode ser editado a fig dps
fig.savefig('nome da figura.png', dpi=300)          #dots per inche, qnt maior mais renderizada
```

#### Pathlib
    Controla pastas e arquivos do PC
"""

from pathlib import Path

#Descobre onde está o arquivo/diretório
caminho = Path.cwd()

#Navegar até uma pasta especifica
caminho = Path('diretorio')

#Listar todos os arquivos da pasta atual
arquivos = Path.iterdir()

#Crindo uma pasta
Path('diretorio/nova_pasta').mkdir()

#Verificando se arquivo existe
arquivo = Path('diretorio/arquivo.extensao').arquivo.exists()

#movendo arquivo
Path('caminho/arquivo.extensao').rename('caminho_novo/arquivo.extensao')

"""#### Shutil
    Ações de copiar e colar arquivo
"""

import shutil

#Copiando um arquivo
shutil.copy2('arquivo_para_copiar.extensao', 'nome_da_copia_criada.extensao')

#Movendo um arquivo
shutil.move(Path('caminho/arquivo.extensao'), Path('caminho_novo/arquivo.extensao'))

